// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assistant {
  id          String @id @default(cuid())
  name        String
  description String
  systemPrompt String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents   Document[]
  chatSessions ChatSession[]

  @@map("assistants")
}

model Document {
  id           String @id @default(cuid())
  fileName     String    // For PDFs: original filename, For websites: page title or URL
  sourceType   String    // 'pdf' or 'website'
  sourceUrl    String?   // For websites: the URL, For PDFs: null
  mimeType     String?   // MIME type of the file
  fileSize     Int?      // File size in bytes
  originalText String
  chunks       Int
  status       String    // 'processing', 'completed', 'failed'
  assistantId  String
  uploadedAt   DateTime @default(now())

  assistant    Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ChatSession {
  id          String @id @default(cuid())
  sessionId   String @unique
  assistantId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assistant   Assistant @relation(fields: [assistantId], references: [id])
  messages    Message[]

  @@map("chat_sessions")
}

model Message {
  id            String @id @default(cuid())
  content       String
  role          String // 'user', 'assistant'
  sessionId     String
  retrievedDocs Json? // Store retrieved document chunks for context
  createdAt     DateTime @default(now())

  chatSession   ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@map("messages")
}
